#![doc = "Peripheral access API for HPM6750 microcontrollers (generated using svd2rust v0.27.2 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.27.2/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 7;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "FGPIO"]
pub struct FGPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FGPIO {}
impl FGPIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fgpio::RegisterBlock = 0x000c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FGPIO {
    type Target = fgpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FGPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FGPIO").finish()
    }
}
#[doc = "FGPIO"]
pub mod fgpio;
#[doc = "GPIO0"]
pub struct GPIO0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO0 {}
impl GPIO0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fgpio::RegisterBlock = 0xf000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO0 {
    type Target = fgpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO0").finish()
    }
}
#[doc = "GPIO0"]
pub use self::fgpio as gpio0;
#[doc = "GPIO1"]
pub struct GPIO1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO1 {}
impl GPIO1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fgpio::RegisterBlock = 0xf000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO1 {
    type Target = fgpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO1").finish()
    }
}
#[doc = "GPIO1"]
pub use self::fgpio as gpio1;
#[doc = "PGPIO"]
pub struct PGPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PGPIO {}
impl PGPIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fgpio::RegisterBlock = 0xf40d_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PGPIO {
    type Target = fgpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PGPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PGPIO").finish()
    }
}
#[doc = "PGPIO"]
pub use self::fgpio as pgpio;
#[doc = "BGPIO"]
pub struct BGPIO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BGPIO {}
impl BGPIO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fgpio::RegisterBlock = 0xf501_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fgpio::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BGPIO {
    type Target = fgpio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BGPIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BGPIO").finish()
    }
}
#[doc = "BGPIO"]
pub use self::fgpio as bgpio;
#[doc = "PLIC"]
pub struct PLIC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PLIC {}
impl PLIC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const plic::RegisterBlock = 0xe400_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const plic::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PLIC {
    type Target = plic::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PLIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PLIC").finish()
    }
}
#[doc = "PLIC"]
pub mod plic;
#[doc = "MCHTMR"]
pub struct MCHTMR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MCHTMR {}
impl MCHTMR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mchtmr::RegisterBlock = 0xe600_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mchtmr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MCHTMR {
    type Target = mchtmr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MCHTMR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCHTMR").finish()
    }
}
#[doc = "MCHTMR"]
pub mod mchtmr;
#[doc = "PLICSW"]
pub struct PLICSW {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PLICSW {}
impl PLICSW {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const plicsw::RegisterBlock = 0xe640_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const plicsw::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PLICSW {
    type Target = plicsw::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PLICSW {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PLICSW").finish()
    }
}
#[doc = "PLICSW"]
pub mod plicsw;
#[doc = "GPIOM"]
pub struct GPIOM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOM {}
impl GPIOM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpiom::RegisterBlock = 0xf000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiom::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIOM {
    type Target = gpiom::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIOM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOM").finish()
    }
}
#[doc = "GPIOM"]
pub mod gpiom;
#[doc = "ADC0"]
pub struct ADC0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC0 {}
impl ADC0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc0::RegisterBlock = 0xf001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC0 {
    type Target = adc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC0").finish()
    }
}
#[doc = "ADC0"]
pub mod adc0;
#[doc = "ADC1"]
pub struct ADC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC1 {}
impl ADC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc0::RegisterBlock = 0xf001_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC1 {
    type Target = adc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
#[doc = "ADC1"]
pub use self::adc0 as adc1;
#[doc = "ADC2"]
pub struct ADC2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC2 {}
impl ADC2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc0::RegisterBlock = 0xf001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC2 {
    type Target = adc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
#[doc = "ADC2"]
pub use self::adc0 as adc2;
#[doc = "ADC3"]
pub struct ADC3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC3 {}
impl ADC3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc3::RegisterBlock = 0xf001_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc3::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC3 {
    type Target = adc3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC3").finish()
    }
}
#[doc = "ADC3"]
pub mod adc3;
#[doc = "ACMP"]
pub struct ACMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ACMP {}
impl ACMP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const acmp::RegisterBlock = 0xf002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const acmp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ACMP {
    type Target = acmp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ACMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ACMP").finish()
    }
}
#[doc = "ACMP"]
pub mod acmp;
#[doc = "SPI0"]
pub struct SPI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI0 {}
impl SPI0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0xf003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI0 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI0").finish()
    }
}
#[doc = "SPI0"]
pub mod spi0;
#[doc = "SPI1"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0xf003_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI1 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "SPI1"]
pub use self::spi0 as spi1;
#[doc = "SPI2"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0xf003_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI2 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "SPI2"]
pub use self::spi0 as spi2;
#[doc = "SPI3"]
pub struct SPI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI3 {}
impl SPI3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0xf003_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPI3 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
#[doc = "SPI3"]
pub use self::spi0 as spi3;
#[doc = "UART0"]
pub struct UART0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART0 {}
impl UART0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART0").finish()
    }
}
#[doc = "UART0"]
pub mod uart0;
#[doc = "UART1"]
pub struct UART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART1 {}
impl UART1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART1 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART1").finish()
    }
}
#[doc = "UART1"]
pub use self::uart0 as uart1;
#[doc = "UART2"]
pub struct UART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART2 {}
impl UART2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART2 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART2").finish()
    }
}
#[doc = "UART2"]
pub use self::uart0 as uart2;
#[doc = "UART3"]
pub struct UART3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART3 {}
impl UART3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf004_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART3 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART3").finish()
    }
}
#[doc = "UART3"]
pub use self::uart0 as uart3;
#[doc = "UART4"]
pub struct UART4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART4 {}
impl UART4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART4 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
#[doc = "UART4"]
pub use self::uart0 as uart4;
#[doc = "UART5"]
pub struct UART5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART5 {}
impl UART5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf005_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART5 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
#[doc = "UART5"]
pub use self::uart0 as uart5;
#[doc = "UART6"]
pub struct UART6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART6 {}
impl UART6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf005_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART6 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART6").finish()
    }
}
#[doc = "UART6"]
pub use self::uart0 as uart6;
#[doc = "UART7"]
pub struct UART7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART7 {}
impl UART7 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf005_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART7 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
#[doc = "UART7"]
pub use self::uart0 as uart7;
#[doc = "UART8"]
pub struct UART8 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART8 {}
impl UART8 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART8 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
#[doc = "UART8"]
pub use self::uart0 as uart8;
#[doc = "UART9"]
pub struct UART9 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART9 {}
impl UART9 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf006_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART9 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART9").finish()
    }
}
#[doc = "UART9"]
pub use self::uart0 as uart9;
#[doc = "UART10"]
pub struct UART10 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART10 {}
impl UART10 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf006_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART10 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART10").finish()
    }
}
#[doc = "UART10"]
pub use self::uart0 as uart10;
#[doc = "UART11"]
pub struct UART11 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART11 {}
impl UART11 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf006_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART11 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART11").finish()
    }
}
#[doc = "UART11"]
pub use self::uart0 as uart11;
#[doc = "UART12"]
pub struct UART12 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART12 {}
impl UART12 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf007_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART12 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART12").finish()
    }
}
#[doc = "UART12"]
pub use self::uart0 as uart12;
#[doc = "UART13"]
pub struct UART13 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART13 {}
impl UART13 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf007_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART13 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART13").finish()
    }
}
#[doc = "UART13"]
pub use self::uart0 as uart13;
#[doc = "UART14"]
pub struct UART14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART14 {}
impl UART14 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf007_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART14 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART14").finish()
    }
}
#[doc = "UART14"]
pub use self::uart0 as uart14;
#[doc = "UART15"]
pub struct UART15 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART15 {}
impl UART15 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf007_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART15 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART15").finish()
    }
}
#[doc = "UART15"]
pub use self::uart0 as uart15;
#[doc = "PUART"]
pub struct PUART {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PUART {}
impl PUART {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0xf40e_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PUART {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PUART").finish()
    }
}
#[doc = "PUART"]
pub use self::uart0 as puart;
#[doc = "CAN0"]
pub struct CAN0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN0 {}
impl CAN0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can0::RegisterBlock = 0xf008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN0 {
    type Target = can0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN0").finish()
    }
}
#[doc = "CAN0"]
pub mod can0;
#[doc = "CAN1"]
pub struct CAN1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN1 {}
impl CAN1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can0::RegisterBlock = 0xf008_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN1 {
    type Target = can0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN1").finish()
    }
}
#[doc = "CAN1"]
pub use self::can0 as can1;
#[doc = "CAN2"]
pub struct CAN2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN2 {}
impl CAN2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can0::RegisterBlock = 0xf008_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN2 {
    type Target = can0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN2").finish()
    }
}
#[doc = "CAN2"]
pub use self::can0 as can2;
#[doc = "CAN3"]
pub struct CAN3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAN3 {}
impl CAN3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can0::RegisterBlock = 0xf008_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAN3 {
    type Target = can0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAN3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN3").finish()
    }
}
#[doc = "CAN3"]
pub use self::can0 as can3;
#[doc = "WDG0"]
pub struct WDG0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDG0 {}
impl WDG0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdg0::RegisterBlock = 0xf009_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdg0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDG0 {
    type Target = wdg0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDG0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDG0").finish()
    }
}
#[doc = "WDG0"]
pub mod wdg0;
#[doc = "WDG1"]
pub struct WDG1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDG1 {}
impl WDG1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdg0::RegisterBlock = 0xf009_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdg0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDG1 {
    type Target = wdg0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDG1").finish()
    }
}
#[doc = "WDG1"]
pub use self::wdg0 as wdg1;
#[doc = "WDG2"]
pub struct WDG2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDG2 {}
impl WDG2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdg0::RegisterBlock = 0xf009_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdg0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDG2 {
    type Target = wdg0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDG2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDG2").finish()
    }
}
#[doc = "WDG2"]
pub use self::wdg0 as wdg2;
#[doc = "WDG3"]
pub struct WDG3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDG3 {}
impl WDG3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdg0::RegisterBlock = 0xf009_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdg0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDG3 {
    type Target = wdg0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDG3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDG3").finish()
    }
}
#[doc = "WDG3"]
pub use self::wdg0 as wdg3;
#[doc = "PWDG"]
pub struct PWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWDG {}
impl PWDG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdg0::RegisterBlock = 0xf40e_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdg0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWDG {
    type Target = wdg0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWDG").finish()
    }
}
#[doc = "PWDG"]
pub use self::wdg0 as pwdg;
#[doc = "MBX0A"]
pub struct MBX0A {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MBX0A {}
impl MBX0A {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mbx0a::RegisterBlock = 0xf00a_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mbx0a::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MBX0A {
    type Target = mbx0a::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MBX0A {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MBX0A").finish()
    }
}
#[doc = "MBX0A"]
pub mod mbx0a;
#[doc = "MBX0B"]
pub struct MBX0B {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MBX0B {}
impl MBX0B {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mbx0a::RegisterBlock = 0xf00a_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mbx0a::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MBX0B {
    type Target = mbx0a::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MBX0B {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MBX0B").finish()
    }
}
#[doc = "MBX0B"]
pub use self::mbx0a as mbx0b;
#[doc = "MBX1A"]
pub struct MBX1A {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MBX1A {}
impl MBX1A {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mbx0a::RegisterBlock = 0xf00a_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mbx0a::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MBX1A {
    type Target = mbx0a::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MBX1A {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MBX1A").finish()
    }
}
#[doc = "MBX1A"]
pub use self::mbx0a as mbx1a;
#[doc = "MBX1B"]
pub struct MBX1B {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MBX1B {}
impl MBX1B {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mbx0a::RegisterBlock = 0xf00a_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mbx0a::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MBX1B {
    type Target = mbx0a::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MBX1B {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MBX1B").finish()
    }
}
#[doc = "MBX1B"]
pub use self::mbx0a as mbx1b;
#[doc = "PTPC"]
pub struct PTPC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PTPC {}
impl PTPC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ptpc::RegisterBlock = 0xf00b_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ptpc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PTPC {
    type Target = ptpc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PTPC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PTPC").finish()
    }
}
#[doc = "PTPC"]
pub mod ptpc;
#[doc = "DMAMUX"]
pub struct DMAMUX {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMAMUX {}
impl DMAMUX {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dmamux::RegisterBlock = 0xf00c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dmamux::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMAMUX {
    type Target = dmamux::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMAMUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAMUX").finish()
    }
}
#[doc = "DMAMUX"]
pub mod dmamux;
#[doc = "HDMA"]
pub struct HDMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HDMA {}
impl HDMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hdma::RegisterBlock = 0xf00c_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hdma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HDMA {
    type Target = hdma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HDMA").finish()
    }
}
#[doc = "HDMA"]
pub mod hdma;
#[doc = "XDMA"]
pub struct XDMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for XDMA {}
impl XDMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hdma::RegisterBlock = 0xf304_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hdma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for XDMA {
    type Target = hdma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for XDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XDMA").finish()
    }
}
#[doc = "XDMA"]
pub use self::hdma as xdma;
#[doc = "RNG"]
pub struct RNG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RNG {}
impl RNG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rng::RegisterBlock = 0xf00c_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rng::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RNG {
    type Target = rng::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
#[doc = "RNG"]
pub mod rng;
#[doc = "KEYM"]
pub struct KEYM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for KEYM {}
impl KEYM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const keym::RegisterBlock = 0xf00c_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const keym::RegisterBlock {
        Self::PTR
    }
}
impl Deref for KEYM {
    type Target = keym::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for KEYM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("KEYM").finish()
    }
}
#[doc = "KEYM"]
pub mod keym;
#[doc = "I2S0"]
pub struct I2S0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S0 {}
impl I2S0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2s0::RegisterBlock = 0xf010_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2S0 {
    type Target = i2s0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2S0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S0").finish()
    }
}
#[doc = "I2S0"]
pub mod i2s0;
#[doc = "I2S1"]
pub struct I2S1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S1 {}
impl I2S1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2s0::RegisterBlock = 0xf010_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2S1 {
    type Target = i2s0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2S1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S1").finish()
    }
}
#[doc = "I2S1"]
pub use self::i2s0 as i2s1;
#[doc = "I2S2"]
pub struct I2S2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S2 {}
impl I2S2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2s0::RegisterBlock = 0xf010_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2S2 {
    type Target = i2s0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2S2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S2").finish()
    }
}
#[doc = "I2S2"]
pub use self::i2s0 as i2s2;
#[doc = "I2S3"]
pub struct I2S3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2S3 {}
impl I2S3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2s0::RegisterBlock = 0xf010_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2s0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2S3 {
    type Target = i2s0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2S3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2S3").finish()
    }
}
#[doc = "I2S3"]
pub use self::i2s0 as i2s3;
#[doc = "DAO"]
pub struct DAO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DAO {}
impl DAO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dao::RegisterBlock = 0xf011_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dao::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DAO {
    type Target = dao::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DAO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAO").finish()
    }
}
#[doc = "DAO"]
pub mod dao;
#[doc = "PDM"]
pub struct PDM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PDM {}
impl PDM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pdm::RegisterBlock = 0xf011_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pdm::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PDM {
    type Target = pdm::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PDM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PDM").finish()
    }
}
#[doc = "PDM"]
pub mod pdm;
#[doc = "PWM0"]
pub struct PWM0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM0 {}
impl PWM0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0xf020_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM0 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM0").finish()
    }
}
#[doc = "PWM0"]
pub mod pwm0;
#[doc = "PWM1"]
pub struct PWM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM1 {}
impl PWM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0xf021_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM1 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM1").finish()
    }
}
#[doc = "PWM1"]
pub use self::pwm0 as pwm1;
#[doc = "PWM2"]
pub struct PWM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM2 {}
impl PWM2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0xf022_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM2 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM2").finish()
    }
}
#[doc = "PWM2"]
pub use self::pwm0 as pwm2;
#[doc = "PWM3"]
pub struct PWM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWM3 {}
impl PWM3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0xf023_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PWM3 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PWM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWM3").finish()
    }
}
#[doc = "PWM3"]
pub use self::pwm0 as pwm3;
#[doc = "HALL0"]
pub struct HALL0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HALL0 {}
impl HALL0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hall0::RegisterBlock = 0xf020_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hall0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HALL0 {
    type Target = hall0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HALL0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HALL0").finish()
    }
}
#[doc = "HALL0"]
pub mod hall0;
#[doc = "HALL1"]
pub struct HALL1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HALL1 {}
impl HALL1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hall0::RegisterBlock = 0xf021_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hall0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HALL1 {
    type Target = hall0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HALL1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HALL1").finish()
    }
}
#[doc = "HALL1"]
pub use self::hall0 as hall1;
#[doc = "HALL2"]
pub struct HALL2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HALL2 {}
impl HALL2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hall0::RegisterBlock = 0xf022_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hall0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HALL2 {
    type Target = hall0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HALL2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HALL2").finish()
    }
}
#[doc = "HALL2"]
pub use self::hall0 as hall2;
#[doc = "HALL3"]
pub struct HALL3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HALL3 {}
impl HALL3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hall0::RegisterBlock = 0xf023_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hall0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HALL3 {
    type Target = hall0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HALL3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HALL3").finish()
    }
}
#[doc = "HALL3"]
pub use self::hall0 as hall3;
#[doc = "QEI0"]
pub struct QEI0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for QEI0 {}
impl QEI0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const qei0::RegisterBlock = 0xf020_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const qei0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for QEI0 {
    type Target = qei0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for QEI0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("QEI0").finish()
    }
}
#[doc = "QEI0"]
pub mod qei0;
#[doc = "QEI1"]
pub struct QEI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for QEI1 {}
impl QEI1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const qei0::RegisterBlock = 0xf021_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const qei0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for QEI1 {
    type Target = qei0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for QEI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("QEI1").finish()
    }
}
#[doc = "QEI1"]
pub use self::qei0 as qei1;
#[doc = "QEI2"]
pub struct QEI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for QEI2 {}
impl QEI2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const qei0::RegisterBlock = 0xf022_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const qei0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for QEI2 {
    type Target = qei0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for QEI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("QEI2").finish()
    }
}
#[doc = "QEI2"]
pub use self::qei0 as qei2;
#[doc = "QEI3"]
pub struct QEI3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for QEI3 {}
impl QEI3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const qei0::RegisterBlock = 0xf023_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const qei0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for QEI3 {
    type Target = qei0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for QEI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("QEI3").finish()
    }
}
#[doc = "QEI3"]
pub use self::qei0 as qei3;
#[doc = "TRGM0"]
pub struct TRGM0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRGM0 {}
impl TRGM0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trgm0::RegisterBlock = 0xf020_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trgm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRGM0 {
    type Target = trgm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRGM0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRGM0").finish()
    }
}
#[doc = "TRGM0"]
pub mod trgm0;
#[doc = "TRGM1"]
pub struct TRGM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRGM1 {}
impl TRGM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trgm0::RegisterBlock = 0xf021_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trgm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRGM1 {
    type Target = trgm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRGM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRGM1").finish()
    }
}
#[doc = "TRGM1"]
pub use self::trgm0 as trgm1;
#[doc = "TRGM2"]
pub struct TRGM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRGM2 {}
impl TRGM2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trgm0::RegisterBlock = 0xf022_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trgm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRGM2 {
    type Target = trgm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRGM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRGM2").finish()
    }
}
#[doc = "TRGM2"]
pub use self::trgm0 as trgm2;
#[doc = "TRGM3"]
pub struct TRGM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TRGM3 {}
impl TRGM3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const trgm0::RegisterBlock = 0xf023_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const trgm0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TRGM3 {
    type Target = trgm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TRGM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TRGM3").finish()
    }
}
#[doc = "TRGM3"]
pub use self::trgm0 as trgm3;
#[doc = "SYNT"]
pub struct SYNT {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYNT {}
impl SYNT {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const synt::RegisterBlock = 0xf024_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const synt::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYNT {
    type Target = synt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYNT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYNT").finish()
    }
}
#[doc = "SYNT"]
pub mod synt;
#[doc = "LCDC"]
pub struct LCDC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LCDC {}
impl LCDC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lcdc::RegisterBlock = 0xf100_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lcdc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LCDC {
    type Target = lcdc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LCDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LCDC").finish()
    }
}
#[doc = "LCDC"]
pub mod lcdc;
#[doc = "CAM0"]
pub struct CAM0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAM0 {}
impl CAM0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cam0::RegisterBlock = 0xf100_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cam0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAM0 {
    type Target = cam0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAM0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAM0").finish()
    }
}
#[doc = "CAM0"]
pub mod cam0;
#[doc = "CAM1"]
pub struct CAM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CAM1 {}
impl CAM1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cam0::RegisterBlock = 0xf100_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cam0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CAM1 {
    type Target = cam0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CAM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAM1").finish()
    }
}
#[doc = "CAM1"]
pub use self::cam0 as cam1;
#[doc = "PDMA"]
pub struct PDMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PDMA {}
impl PDMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pdma::RegisterBlock = 0xf101_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pdma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PDMA {
    type Target = pdma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PDMA").finish()
    }
}
#[doc = "PDMA"]
pub mod pdma;
#[doc = "JPEG"]
pub struct JPEG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for JPEG {}
impl JPEG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const jpeg::RegisterBlock = 0xf101_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const jpeg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for JPEG {
    type Target = jpeg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for JPEG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("JPEG").finish()
    }
}
#[doc = "JPEG"]
pub mod jpeg;
#[doc = "ENET0"]
pub struct ENET0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ENET0 {}
impl ENET0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const enet0::RegisterBlock = 0xf200_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const enet0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ENET0 {
    type Target = enet0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ENET0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ENET0").finish()
    }
}
#[doc = "ENET0"]
pub mod enet0;
#[doc = "ENET1"]
pub struct ENET1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ENET1 {}
impl ENET1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const enet0::RegisterBlock = 0xf200_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const enet0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ENET1 {
    type Target = enet0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ENET1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ENET1").finish()
    }
}
#[doc = "ENET1"]
pub use self::enet0 as enet1;
#[doc = "NTMR0"]
pub struct NTMR0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for NTMR0 {}
impl NTMR0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf201_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for NTMR0 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for NTMR0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("NTMR0").finish()
    }
}
#[doc = "NTMR0"]
pub mod ntmr0;
#[doc = "NTMR1"]
pub struct NTMR1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for NTMR1 {}
impl NTMR1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf201_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for NTMR1 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for NTMR1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("NTMR1").finish()
    }
}
#[doc = "NTMR1"]
pub use self::ntmr0 as ntmr1;
#[doc = "GPTMR0"]
pub struct GPTMR0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR0 {}
impl GPTMR0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf300_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR0 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR0").finish()
    }
}
#[doc = "GPTMR0"]
pub use self::ntmr0 as gptmr0;
#[doc = "GPTMR1"]
pub struct GPTMR1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR1 {}
impl GPTMR1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf300_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR1 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR1").finish()
    }
}
#[doc = "GPTMR1"]
pub use self::ntmr0 as gptmr1;
#[doc = "GPTMR2"]
pub struct GPTMR2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR2 {}
impl GPTMR2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf300_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR2 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR2").finish()
    }
}
#[doc = "GPTMR2"]
pub use self::ntmr0 as gptmr2;
#[doc = "GPTMR3"]
pub struct GPTMR3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR3 {}
impl GPTMR3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf300_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR3 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR3").finish()
    }
}
#[doc = "GPTMR3"]
pub use self::ntmr0 as gptmr3;
#[doc = "GPTMR4"]
pub struct GPTMR4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR4 {}
impl GPTMR4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf301_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR4 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR4").finish()
    }
}
#[doc = "GPTMR4"]
pub use self::ntmr0 as gptmr4;
#[doc = "GPTMR5"]
pub struct GPTMR5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR5 {}
impl GPTMR5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf301_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR5 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR5").finish()
    }
}
#[doc = "GPTMR5"]
pub use self::ntmr0 as gptmr5;
#[doc = "GPTMR6"]
pub struct GPTMR6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR6 {}
impl GPTMR6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf301_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR6 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR6").finish()
    }
}
#[doc = "GPTMR6"]
pub use self::ntmr0 as gptmr6;
#[doc = "GPTMR7"]
pub struct GPTMR7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPTMR7 {}
impl GPTMR7 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf301_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPTMR7 {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPTMR7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPTMR7").finish()
    }
}
#[doc = "GPTMR7"]
pub use self::ntmr0 as gptmr7;
#[doc = "PTMR"]
pub struct PTMR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PTMR {}
impl PTMR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ntmr0::RegisterBlock = 0xf40e_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ntmr0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PTMR {
    type Target = ntmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PTMR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PTMR").finish()
    }
}
#[doc = "PTMR"]
pub use self::ntmr0 as ptmr;
#[doc = "USB0"]
pub struct USB0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB0 {}
impl USB0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb0::RegisterBlock = 0xf202_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB0 {
    type Target = usb0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB0").finish()
    }
}
#[doc = "USB0"]
pub mod usb0;
#[doc = "USB1"]
pub struct USB1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USB1 {}
impl USB1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usb0::RegisterBlock = 0xf202_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usb0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USB1 {
    type Target = usb0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB1").finish()
    }
}
#[doc = "USB1"]
pub use self::usb0 as usb1;
#[doc = "SDXC0"]
pub struct SDXC0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDXC0 {}
impl SDXC0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdxc0::RegisterBlock = 0xf203_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdxc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDXC0 {
    type Target = sdxc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDXC0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDXC0").finish()
    }
}
#[doc = "SDXC0"]
pub mod sdxc0;
#[doc = "SDXC1"]
pub struct SDXC1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDXC1 {}
impl SDXC1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdxc0::RegisterBlock = 0xf203_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdxc0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDXC1 {
    type Target = sdxc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDXC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDXC1").finish()
    }
}
#[doc = "SDXC1"]
pub use self::sdxc0 as sdxc1;
#[doc = "CONCTL"]
pub struct CONCTL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CONCTL {}
impl CONCTL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const conctl::RegisterBlock = 0xf204_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const conctl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CONCTL {
    type Target = conctl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CONCTL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CONCTL").finish()
    }
}
#[doc = "CONCTL"]
pub mod conctl;
#[doc = "I2C0"]
pub struct I2C0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0 {}
impl I2C0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0xf302_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C0 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C0").finish()
    }
}
#[doc = "I2C0"]
pub mod i2c0;
#[doc = "I2C1"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0xf302_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "I2C1"]
pub use self::i2c0 as i2c1;
#[doc = "I2C2"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0xf302_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C2 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
#[doc = "I2C2"]
pub use self::i2c0 as i2c2;
#[doc = "I2C3"]
pub struct I2C3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C3 {}
impl I2C3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0xf302_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C3 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
#[doc = "I2C3"]
pub use self::i2c0 as i2c3;
#[doc = "SDP"]
pub struct SDP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDP {}
impl SDP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdp::RegisterBlock = 0xf304_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDP {
    type Target = sdp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDP").finish()
    }
}
#[doc = "SDP"]
pub mod sdp;
#[doc = "DRAM"]
pub struct DRAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DRAM {}
impl DRAM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dram::RegisterBlock = 0xf305_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DRAM {
    type Target = dram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DRAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DRAM").finish()
    }
}
#[doc = "DRAM"]
pub mod dram;
#[doc = "SYSCTL"]
pub struct SYSCTL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCTL {}
impl SYSCTL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sysctl::RegisterBlock = 0xf400_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sysctl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCTL {
    type Target = sysctl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCTL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCTL").finish()
    }
}
#[doc = "SYSCTL"]
pub mod sysctl;
#[doc = "Input/Output Control"]
pub struct IOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IOC {}
impl IOC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ioc::RegisterBlock = 0xf404_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IOC {
    type Target = ioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IOC").finish()
    }
}
#[doc = "Input/Output Control"]
pub mod ioc;
#[doc = "PIOC"]
pub struct PIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PIOC {}
impl PIOC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ioc::RegisterBlock = 0xf40d_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PIOC {
    type Target = ioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PIOC").finish()
    }
}
#[doc = "PIOC"]
pub use self::ioc as pioc;
#[doc = "BIOC"]
pub struct BIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BIOC {}
impl BIOC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ioc::RegisterBlock = 0xf501_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ioc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BIOC {
    type Target = ioc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BIOC").finish()
    }
}
#[doc = "BIOC"]
pub use self::ioc as bioc;
#[doc = "OTPSHW"]
pub struct OTPSHW {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OTPSHW {}
impl OTPSHW {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const otpshw::RegisterBlock = 0xf408_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const otpshw::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OTPSHW {
    type Target = otpshw::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OTPSHW {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTPSHW").finish()
    }
}
#[doc = "OTPSHW"]
pub mod otpshw;
#[doc = "OTP"]
pub struct OTP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OTP {}
impl OTP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const otpshw::RegisterBlock = 0xf40c_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const otpshw::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OTP {
    type Target = otpshw::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OTP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTP").finish()
    }
}
#[doc = "OTP"]
pub use self::otpshw as otp;
#[doc = "PPOR"]
pub struct PPOR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PPOR {}
impl PPOR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ppor::RegisterBlock = 0xf40c_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ppor::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PPOR {
    type Target = ppor::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PPOR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PPOR").finish()
    }
}
#[doc = "PPOR"]
pub mod ppor;
#[doc = "PCFG"]
pub struct PCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PCFG {}
impl PCFG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pcfg::RegisterBlock = 0xf40c_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PCFG {
    type Target = pcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PCFG").finish()
    }
}
#[doc = "PCFG"]
pub mod pcfg;
#[doc = "PSEC"]
pub struct PSEC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PSEC {}
impl PSEC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const psec::RegisterBlock = 0xf40c_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const psec::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PSEC {
    type Target = psec::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PSEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSEC").finish()
    }
}
#[doc = "PSEC"]
pub mod psec;
#[doc = "PMON"]
pub struct PMON {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PMON {}
impl PMON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmon::RegisterBlock = 0xf40d_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmon::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PMON {
    type Target = pmon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PMON").finish()
    }
}
#[doc = "PMON"]
pub mod pmon;
#[doc = "PGPR"]
pub struct PGPR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PGPR {}
impl PGPR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pgpr::RegisterBlock = 0xf40d_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pgpr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PGPR {
    type Target = pgpr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PGPR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PGPR").finish()
    }
}
#[doc = "PGPR"]
pub mod pgpr;
#[doc = "VAD"]
pub struct VAD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VAD {}
impl VAD {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const vad::RegisterBlock = 0xf40e_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const vad::RegisterBlock {
        Self::PTR
    }
}
impl Deref for VAD {
    type Target = vad::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for VAD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VAD").finish()
    }
}
#[doc = "VAD"]
pub mod vad;
#[doc = "PLLCTL"]
pub struct PLLCTL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PLLCTL {}
impl PLLCTL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pllctl::RegisterBlock = 0xf410_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pllctl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PLLCTL {
    type Target = pllctl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PLLCTL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PLLCTL").finish()
    }
}
#[doc = "PLLCTL"]
pub mod pllctl;
#[doc = "BPOR"]
pub struct BPOR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BPOR {}
impl BPOR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bpor::RegisterBlock = 0xf500_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bpor::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BPOR {
    type Target = bpor::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BPOR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BPOR").finish()
    }
}
#[doc = "BPOR"]
pub mod bpor;
#[doc = "BCFG"]
pub struct BCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BCFG {}
impl BCFG {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bcfg::RegisterBlock = 0xf500_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bcfg::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BCFG {
    type Target = bcfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BCFG").finish()
    }
}
#[doc = "BCFG"]
pub mod bcfg;
#[doc = "BUTN"]
pub struct BUTN {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BUTN {}
impl BUTN {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const butn::RegisterBlock = 0xf500_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const butn::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BUTN {
    type Target = butn::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BUTN {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BUTN").finish()
    }
}
#[doc = "BUTN"]
pub mod butn;
#[doc = "BGPR"]
pub struct BGPR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BGPR {}
impl BGPR {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bgpr::RegisterBlock = 0xf501_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bgpr::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BGPR {
    type Target = bgpr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BGPR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BGPR").finish()
    }
}
#[doc = "BGPR"]
pub mod bgpr;
#[doc = "RTCSHW"]
pub struct RTCSHW {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTCSHW {}
impl RTCSHW {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtcshw::RegisterBlock = 0xf501_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtcshw::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTCSHW {
    type Target = rtcshw::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTCSHW {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTCSHW").finish()
    }
}
#[doc = "RTCSHW"]
pub mod rtcshw;
#[doc = "RTC"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtcshw::RegisterBlock = 0xf504_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtcshw::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTC {
    type Target = rtcshw::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
#[doc = "RTC"]
pub use self::rtcshw as rtc;
#[doc = "BSEC"]
pub struct BSEC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BSEC {}
impl BSEC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bsec::RegisterBlock = 0xf504_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bsec::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BSEC {
    type Target = bsec::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BSEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSEC").finish()
    }
}
#[doc = "BSEC"]
pub mod bsec;
#[doc = "BKEY"]
pub struct BKEY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BKEY {}
impl BKEY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bkey::RegisterBlock = 0xf504_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bkey::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BKEY {
    type Target = bkey::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BKEY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BKEY").finish()
    }
}
#[doc = "BKEY"]
pub mod bkey;
#[doc = "BMON"]
pub struct BMON {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BMON {}
impl BMON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bmon::RegisterBlock = 0xf504_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bmon::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BMON {
    type Target = bmon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BMON").finish()
    }
}
#[doc = "BMON"]
pub mod bmon;
#[doc = "TAMP"]
pub struct TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TAMP {}
impl TAMP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tamp::RegisterBlock = 0xf505_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
#[doc = "TAMP"]
pub mod tamp;
#[doc = "MONO"]
pub struct MONO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MONO {}
impl MONO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mono::RegisterBlock = 0xf505_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mono::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MONO {
    type Target = mono::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MONO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MONO").finish()
    }
}
#[doc = "MONO"]
pub mod mono;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "FGPIO"]
    pub FGPIO: FGPIO,
    #[doc = "GPIO0"]
    pub GPIO0: GPIO0,
    #[doc = "GPIO1"]
    pub GPIO1: GPIO1,
    #[doc = "PGPIO"]
    pub PGPIO: PGPIO,
    #[doc = "BGPIO"]
    pub BGPIO: BGPIO,
    #[doc = "PLIC"]
    pub PLIC: PLIC,
    #[doc = "MCHTMR"]
    pub MCHTMR: MCHTMR,
    #[doc = "PLICSW"]
    pub PLICSW: PLICSW,
    #[doc = "GPIOM"]
    pub GPIOM: GPIOM,
    #[doc = "ADC0"]
    pub ADC0: ADC0,
    #[doc = "ADC1"]
    pub ADC1: ADC1,
    #[doc = "ADC2"]
    pub ADC2: ADC2,
    #[doc = "ADC3"]
    pub ADC3: ADC3,
    #[doc = "ACMP"]
    pub ACMP: ACMP,
    #[doc = "SPI0"]
    pub SPI0: SPI0,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "SPI3"]
    pub SPI3: SPI3,
    #[doc = "UART0"]
    pub UART0: UART0,
    #[doc = "UART1"]
    pub UART1: UART1,
    #[doc = "UART2"]
    pub UART2: UART2,
    #[doc = "UART3"]
    pub UART3: UART3,
    #[doc = "UART4"]
    pub UART4: UART4,
    #[doc = "UART5"]
    pub UART5: UART5,
    #[doc = "UART6"]
    pub UART6: UART6,
    #[doc = "UART7"]
    pub UART7: UART7,
    #[doc = "UART8"]
    pub UART8: UART8,
    #[doc = "UART9"]
    pub UART9: UART9,
    #[doc = "UART10"]
    pub UART10: UART10,
    #[doc = "UART11"]
    pub UART11: UART11,
    #[doc = "UART12"]
    pub UART12: UART12,
    #[doc = "UART13"]
    pub UART13: UART13,
    #[doc = "UART14"]
    pub UART14: UART14,
    #[doc = "UART15"]
    pub UART15: UART15,
    #[doc = "PUART"]
    pub PUART: PUART,
    #[doc = "CAN0"]
    pub CAN0: CAN0,
    #[doc = "CAN1"]
    pub CAN1: CAN1,
    #[doc = "CAN2"]
    pub CAN2: CAN2,
    #[doc = "CAN3"]
    pub CAN3: CAN3,
    #[doc = "WDG0"]
    pub WDG0: WDG0,
    #[doc = "WDG1"]
    pub WDG1: WDG1,
    #[doc = "WDG2"]
    pub WDG2: WDG2,
    #[doc = "WDG3"]
    pub WDG3: WDG3,
    #[doc = "PWDG"]
    pub PWDG: PWDG,
    #[doc = "MBX0A"]
    pub MBX0A: MBX0A,
    #[doc = "MBX0B"]
    pub MBX0B: MBX0B,
    #[doc = "MBX1A"]
    pub MBX1A: MBX1A,
    #[doc = "MBX1B"]
    pub MBX1B: MBX1B,
    #[doc = "PTPC"]
    pub PTPC: PTPC,
    #[doc = "DMAMUX"]
    pub DMAMUX: DMAMUX,
    #[doc = "HDMA"]
    pub HDMA: HDMA,
    #[doc = "XDMA"]
    pub XDMA: XDMA,
    #[doc = "RNG"]
    pub RNG: RNG,
    #[doc = "KEYM"]
    pub KEYM: KEYM,
    #[doc = "I2S0"]
    pub I2S0: I2S0,
    #[doc = "I2S1"]
    pub I2S1: I2S1,
    #[doc = "I2S2"]
    pub I2S2: I2S2,
    #[doc = "I2S3"]
    pub I2S3: I2S3,
    #[doc = "DAO"]
    pub DAO: DAO,
    #[doc = "PDM"]
    pub PDM: PDM,
    #[doc = "PWM0"]
    pub PWM0: PWM0,
    #[doc = "PWM1"]
    pub PWM1: PWM1,
    #[doc = "PWM2"]
    pub PWM2: PWM2,
    #[doc = "PWM3"]
    pub PWM3: PWM3,
    #[doc = "HALL0"]
    pub HALL0: HALL0,
    #[doc = "HALL1"]
    pub HALL1: HALL1,
    #[doc = "HALL2"]
    pub HALL2: HALL2,
    #[doc = "HALL3"]
    pub HALL3: HALL3,
    #[doc = "QEI0"]
    pub QEI0: QEI0,
    #[doc = "QEI1"]
    pub QEI1: QEI1,
    #[doc = "QEI2"]
    pub QEI2: QEI2,
    #[doc = "QEI3"]
    pub QEI3: QEI3,
    #[doc = "TRGM0"]
    pub TRGM0: TRGM0,
    #[doc = "TRGM1"]
    pub TRGM1: TRGM1,
    #[doc = "TRGM2"]
    pub TRGM2: TRGM2,
    #[doc = "TRGM3"]
    pub TRGM3: TRGM3,
    #[doc = "SYNT"]
    pub SYNT: SYNT,
    #[doc = "LCDC"]
    pub LCDC: LCDC,
    #[doc = "CAM0"]
    pub CAM0: CAM0,
    #[doc = "CAM1"]
    pub CAM1: CAM1,
    #[doc = "PDMA"]
    pub PDMA: PDMA,
    #[doc = "JPEG"]
    pub JPEG: JPEG,
    #[doc = "ENET0"]
    pub ENET0: ENET0,
    #[doc = "ENET1"]
    pub ENET1: ENET1,
    #[doc = "NTMR0"]
    pub NTMR0: NTMR0,
    #[doc = "NTMR1"]
    pub NTMR1: NTMR1,
    #[doc = "GPTMR0"]
    pub GPTMR0: GPTMR0,
    #[doc = "GPTMR1"]
    pub GPTMR1: GPTMR1,
    #[doc = "GPTMR2"]
    pub GPTMR2: GPTMR2,
    #[doc = "GPTMR3"]
    pub GPTMR3: GPTMR3,
    #[doc = "GPTMR4"]
    pub GPTMR4: GPTMR4,
    #[doc = "GPTMR5"]
    pub GPTMR5: GPTMR5,
    #[doc = "GPTMR6"]
    pub GPTMR6: GPTMR6,
    #[doc = "GPTMR7"]
    pub GPTMR7: GPTMR7,
    #[doc = "PTMR"]
    pub PTMR: PTMR,
    #[doc = "USB0"]
    pub USB0: USB0,
    #[doc = "USB1"]
    pub USB1: USB1,
    #[doc = "SDXC0"]
    pub SDXC0: SDXC0,
    #[doc = "SDXC1"]
    pub SDXC1: SDXC1,
    #[doc = "CONCTL"]
    pub CONCTL: CONCTL,
    #[doc = "I2C0"]
    pub I2C0: I2C0,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "I2C3"]
    pub I2C3: I2C3,
    #[doc = "SDP"]
    pub SDP: SDP,
    #[doc = "DRAM"]
    pub DRAM: DRAM,
    #[doc = "SYSCTL"]
    pub SYSCTL: SYSCTL,
    #[doc = "IOC"]
    pub IOC: IOC,
    #[doc = "PIOC"]
    pub PIOC: PIOC,
    #[doc = "BIOC"]
    pub BIOC: BIOC,
    #[doc = "OTPSHW"]
    pub OTPSHW: OTPSHW,
    #[doc = "OTP"]
    pub OTP: OTP,
    #[doc = "PPOR"]
    pub PPOR: PPOR,
    #[doc = "PCFG"]
    pub PCFG: PCFG,
    #[doc = "PSEC"]
    pub PSEC: PSEC,
    #[doc = "PMON"]
    pub PMON: PMON,
    #[doc = "PGPR"]
    pub PGPR: PGPR,
    #[doc = "VAD"]
    pub VAD: VAD,
    #[doc = "PLLCTL"]
    pub PLLCTL: PLLCTL,
    #[doc = "BPOR"]
    pub BPOR: BPOR,
    #[doc = "BCFG"]
    pub BCFG: BCFG,
    #[doc = "BUTN"]
    pub BUTN: BUTN,
    #[doc = "BGPR"]
    pub BGPR: BGPR,
    #[doc = "RTCSHW"]
    pub RTCSHW: RTCSHW,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "BSEC"]
    pub BSEC: BSEC,
    #[doc = "BKEY"]
    pub BKEY: BKEY,
    #[doc = "BMON"]
    pub BMON: BMON,
    #[doc = "TAMP"]
    pub TAMP: TAMP,
    #[doc = "MONO"]
    pub MONO: MONO,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            FGPIO: FGPIO {
                _marker: PhantomData,
            },
            GPIO0: GPIO0 {
                _marker: PhantomData,
            },
            GPIO1: GPIO1 {
                _marker: PhantomData,
            },
            PGPIO: PGPIO {
                _marker: PhantomData,
            },
            BGPIO: BGPIO {
                _marker: PhantomData,
            },
            PLIC: PLIC {
                _marker: PhantomData,
            },
            MCHTMR: MCHTMR {
                _marker: PhantomData,
            },
            PLICSW: PLICSW {
                _marker: PhantomData,
            },
            GPIOM: GPIOM {
                _marker: PhantomData,
            },
            ADC0: ADC0 {
                _marker: PhantomData,
            },
            ADC1: ADC1 {
                _marker: PhantomData,
            },
            ADC2: ADC2 {
                _marker: PhantomData,
            },
            ADC3: ADC3 {
                _marker: PhantomData,
            },
            ACMP: ACMP {
                _marker: PhantomData,
            },
            SPI0: SPI0 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            SPI3: SPI3 {
                _marker: PhantomData,
            },
            UART0: UART0 {
                _marker: PhantomData,
            },
            UART1: UART1 {
                _marker: PhantomData,
            },
            UART2: UART2 {
                _marker: PhantomData,
            },
            UART3: UART3 {
                _marker: PhantomData,
            },
            UART4: UART4 {
                _marker: PhantomData,
            },
            UART5: UART5 {
                _marker: PhantomData,
            },
            UART6: UART6 {
                _marker: PhantomData,
            },
            UART7: UART7 {
                _marker: PhantomData,
            },
            UART8: UART8 {
                _marker: PhantomData,
            },
            UART9: UART9 {
                _marker: PhantomData,
            },
            UART10: UART10 {
                _marker: PhantomData,
            },
            UART11: UART11 {
                _marker: PhantomData,
            },
            UART12: UART12 {
                _marker: PhantomData,
            },
            UART13: UART13 {
                _marker: PhantomData,
            },
            UART14: UART14 {
                _marker: PhantomData,
            },
            UART15: UART15 {
                _marker: PhantomData,
            },
            PUART: PUART {
                _marker: PhantomData,
            },
            CAN0: CAN0 {
                _marker: PhantomData,
            },
            CAN1: CAN1 {
                _marker: PhantomData,
            },
            CAN2: CAN2 {
                _marker: PhantomData,
            },
            CAN3: CAN3 {
                _marker: PhantomData,
            },
            WDG0: WDG0 {
                _marker: PhantomData,
            },
            WDG1: WDG1 {
                _marker: PhantomData,
            },
            WDG2: WDG2 {
                _marker: PhantomData,
            },
            WDG3: WDG3 {
                _marker: PhantomData,
            },
            PWDG: PWDG {
                _marker: PhantomData,
            },
            MBX0A: MBX0A {
                _marker: PhantomData,
            },
            MBX0B: MBX0B {
                _marker: PhantomData,
            },
            MBX1A: MBX1A {
                _marker: PhantomData,
            },
            MBX1B: MBX1B {
                _marker: PhantomData,
            },
            PTPC: PTPC {
                _marker: PhantomData,
            },
            DMAMUX: DMAMUX {
                _marker: PhantomData,
            },
            HDMA: HDMA {
                _marker: PhantomData,
            },
            XDMA: XDMA {
                _marker: PhantomData,
            },
            RNG: RNG {
                _marker: PhantomData,
            },
            KEYM: KEYM {
                _marker: PhantomData,
            },
            I2S0: I2S0 {
                _marker: PhantomData,
            },
            I2S1: I2S1 {
                _marker: PhantomData,
            },
            I2S2: I2S2 {
                _marker: PhantomData,
            },
            I2S3: I2S3 {
                _marker: PhantomData,
            },
            DAO: DAO {
                _marker: PhantomData,
            },
            PDM: PDM {
                _marker: PhantomData,
            },
            PWM0: PWM0 {
                _marker: PhantomData,
            },
            PWM1: PWM1 {
                _marker: PhantomData,
            },
            PWM2: PWM2 {
                _marker: PhantomData,
            },
            PWM3: PWM3 {
                _marker: PhantomData,
            },
            HALL0: HALL0 {
                _marker: PhantomData,
            },
            HALL1: HALL1 {
                _marker: PhantomData,
            },
            HALL2: HALL2 {
                _marker: PhantomData,
            },
            HALL3: HALL3 {
                _marker: PhantomData,
            },
            QEI0: QEI0 {
                _marker: PhantomData,
            },
            QEI1: QEI1 {
                _marker: PhantomData,
            },
            QEI2: QEI2 {
                _marker: PhantomData,
            },
            QEI3: QEI3 {
                _marker: PhantomData,
            },
            TRGM0: TRGM0 {
                _marker: PhantomData,
            },
            TRGM1: TRGM1 {
                _marker: PhantomData,
            },
            TRGM2: TRGM2 {
                _marker: PhantomData,
            },
            TRGM3: TRGM3 {
                _marker: PhantomData,
            },
            SYNT: SYNT {
                _marker: PhantomData,
            },
            LCDC: LCDC {
                _marker: PhantomData,
            },
            CAM0: CAM0 {
                _marker: PhantomData,
            },
            CAM1: CAM1 {
                _marker: PhantomData,
            },
            PDMA: PDMA {
                _marker: PhantomData,
            },
            JPEG: JPEG {
                _marker: PhantomData,
            },
            ENET0: ENET0 {
                _marker: PhantomData,
            },
            ENET1: ENET1 {
                _marker: PhantomData,
            },
            NTMR0: NTMR0 {
                _marker: PhantomData,
            },
            NTMR1: NTMR1 {
                _marker: PhantomData,
            },
            GPTMR0: GPTMR0 {
                _marker: PhantomData,
            },
            GPTMR1: GPTMR1 {
                _marker: PhantomData,
            },
            GPTMR2: GPTMR2 {
                _marker: PhantomData,
            },
            GPTMR3: GPTMR3 {
                _marker: PhantomData,
            },
            GPTMR4: GPTMR4 {
                _marker: PhantomData,
            },
            GPTMR5: GPTMR5 {
                _marker: PhantomData,
            },
            GPTMR6: GPTMR6 {
                _marker: PhantomData,
            },
            GPTMR7: GPTMR7 {
                _marker: PhantomData,
            },
            PTMR: PTMR {
                _marker: PhantomData,
            },
            USB0: USB0 {
                _marker: PhantomData,
            },
            USB1: USB1 {
                _marker: PhantomData,
            },
            SDXC0: SDXC0 {
                _marker: PhantomData,
            },
            SDXC1: SDXC1 {
                _marker: PhantomData,
            },
            CONCTL: CONCTL {
                _marker: PhantomData,
            },
            I2C0: I2C0 {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            I2C3: I2C3 {
                _marker: PhantomData,
            },
            SDP: SDP {
                _marker: PhantomData,
            },
            DRAM: DRAM {
                _marker: PhantomData,
            },
            SYSCTL: SYSCTL {
                _marker: PhantomData,
            },
            IOC: IOC {
                _marker: PhantomData,
            },
            PIOC: PIOC {
                _marker: PhantomData,
            },
            BIOC: BIOC {
                _marker: PhantomData,
            },
            OTPSHW: OTPSHW {
                _marker: PhantomData,
            },
            OTP: OTP {
                _marker: PhantomData,
            },
            PPOR: PPOR {
                _marker: PhantomData,
            },
            PCFG: PCFG {
                _marker: PhantomData,
            },
            PSEC: PSEC {
                _marker: PhantomData,
            },
            PMON: PMON {
                _marker: PhantomData,
            },
            PGPR: PGPR {
                _marker: PhantomData,
            },
            VAD: VAD {
                _marker: PhantomData,
            },
            PLLCTL: PLLCTL {
                _marker: PhantomData,
            },
            BPOR: BPOR {
                _marker: PhantomData,
            },
            BCFG: BCFG {
                _marker: PhantomData,
            },
            BUTN: BUTN {
                _marker: PhantomData,
            },
            BGPR: BGPR {
                _marker: PhantomData,
            },
            RTCSHW: RTCSHW {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            BSEC: BSEC {
                _marker: PhantomData,
            },
            BKEY: BKEY {
                _marker: PhantomData,
            },
            BMON: BMON {
                _marker: PhantomData,
            },
            TAMP: TAMP {
                _marker: PhantomData,
            },
            MONO: MONO {
                _marker: PhantomData,
            },
        }
    }
}
