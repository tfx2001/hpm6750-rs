#[doc = "Register `SLOT_INTR_STATUS` reader"]
pub struct R(crate::R<SLOT_INTR_STATUS_SPEC>);
impl core::ops::Deref for R {
    type Target = crate::R<SLOT_INTR_STATUS_SPEC>;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl From<crate::R<SLOT_INTR_STATUS_SPEC>> for R {
    #[inline(always)]
    fn from(reader: crate::R<SLOT_INTR_STATUS_SPEC>) -> Self {
        R(reader)
    }
}
#[doc = "Field `INTR_SLOT` reader - Interrupt signal for each Slot These status bits indicate the logical OR of Interrupt signal and Wakeup signal for each slot. A maximum of 8 slots can be defined. If one interrupt signal is associated with multiple slots, the Host Driver can identify the interrupt that is generated by reading these bits. By a power on reset or by setting Software Reset For All bit, the interrupt signals are de-asserted and this status reads 00h. Bit 00: Slot 1 Bit 01: Slot 2 Bit 02: Slot 3 .......... .......... Bit 07: Slot 8 Note: MSHC Host Controller support single card slot. This register shall always return 0."]
pub type INTR_SLOT_R = crate::FieldReader<u8, u8>;
impl R {
    #[doc = "Bits 0:7 - Interrupt signal for each Slot These status bits indicate the logical OR of Interrupt signal and Wakeup signal for each slot. A maximum of 8 slots can be defined. If one interrupt signal is associated with multiple slots, the Host Driver can identify the interrupt that is generated by reading these bits. By a power on reset or by setting Software Reset For All bit, the interrupt signals are de-asserted and this status reads 00h. Bit 00: Slot 1 Bit 01: Slot 2 Bit 02: Slot 3 .......... .......... Bit 07: Slot 8 Note: MSHC Host Controller support single card slot. This register shall always return 0."]
    #[inline(always)]
    pub fn intr_slot(&self) -> INTR_SLOT_R {
        INTR_SLOT_R::new((self.bits & 0xff) as u8)
    }
}
#[doc = "No description avaiable\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [slot_intr_status](index.html) module"]
pub struct SLOT_INTR_STATUS_SPEC;
impl crate::RegisterSpec for SLOT_INTR_STATUS_SPEC {
    type Ux = u16;
}
#[doc = "`read()` method returns [slot_intr_status::R](R) reader structure"]
impl crate::Readable for SLOT_INTR_STATUS_SPEC {
    type Reader = R;
}
#[doc = "`reset()` method sets SLOT_INTR_STATUS to value 0"]
impl crate::Resettable for SLOT_INTR_STATUS_SPEC {
    const RESET_VALUE: Self::Ux = 0;
}
